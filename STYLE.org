#+title: Style
#+author: CÃ©leste Ornato <celeste@ornato.com>
#+date: Mon Jul 14 2025

This document relates to coding style, and to the bits of formatting
that are not handled by conventional formatters.

* Naming
C files are marked as ~.c~, headers are marked as ~.h~, all object files are marked as ~.o~, and assembly sources are ~.S~.
C++ files are marked as trash.

Everything is in =snake_case=. No typedefs (see [[Types]]).
* Assembly blocks
Calls to ~__asm__~ are obviously only accepted in architecture-dependent code.
They must always be volatile.

If an assembly call has three instructions or less, they should all be put on the same line like so:
#+begin_src C
__asm__ volatile("cli; hlt");
#+end_src
If an assembly call has between four and ten instructions, it must only have one instruction per line,
formatted like so:
#+begin_src C
__asm__ volatile("nop;"
                 "sti;"
                 "cli;"
                 "hlt;");
#+end_src
If an assembly call has more than ten instructions, it should be put in an assembly source file instead of being
put in an ~__asm__~ block.

The ~[[gnu::naked]]~ attribute should only be used for simple function wrappers in context where the standard prologue/epilogue
format of a C function cannot be used.

* Function signatures
Use C23-style attributes in the declaration if relevant. You may either have
named or unnamed parameters, but you cannot mix-and-match the styles inside
a single signature. If there is any doubt as to the nature of a parameter,
they should *all* be named.

Functions defined in assembly must be prefixed with ~asm_~, and declared as
~extern~.

* Returning errors
If a function can cause an error, one must have its error codes in an enum and "return"
through an ~out~ parameter. The function must also be marked as ~[[nodiscard]]~.

This is what a function signature returning the type ~int~ must look like:
#+begin_src C
[[nodiscard]]
enum foo_err foo([your parameters here], int* out);
#+end_src

The only exception to this rule is for functions that allocate virtual memory, as ~nullptr~ is already
a fitting error value. You must still mark them as ~[[nodiscard]]~.

* Types
No ~typedefs~, unless it is required for a type to be opaque for compatibility reasons
in architecture-independent code. If one cannot guess the nature of a variable from its
type, name it better.

Never ~typedef~ structs, unions, or enums; please.

** Special cases
So as to be semantically correct as possible, you should try to apply the following rules:
+ Array index: ~ptrdiff_t~ / ~size_t~
  + Why: The standard defines ptrdiff_t as the main type for indices, however signedness
    can be annoying sometimes, so you can use size_t if it is more practical.
+ Length/Count of an array: ~size_t~
  + Why: It's really annoying when I see a function that marks length as an ~int~.
+ Physical Address: ~uintptr_t~
  + Why: These are shifted around a lot in x64, so we prefer unsigned over intptr_t.
